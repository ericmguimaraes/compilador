/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.pascal.analysis;

import java.util.*;
import org.sablecc.pascal.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getDeclarations() != null)
        {
            node.getDeclarations().apply(this);
        }
        if(node.getProgramHeading() != null)
        {
            node.getProgramHeading().apply(this);
        }
        outAProgram(node);
    }

    public void inAProgramHeading(AProgramHeading node)
    {
        defaultIn(node);
    }

    public void outAProgramHeading(AProgramHeading node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramHeading(AProgramHeading node)
    {
        inAProgramHeading(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getProgram() != null)
        {
            node.getProgram().apply(this);
        }
        outAProgramHeading(node);
    }

    public void inADeclarations(ADeclarations node)
    {
        defaultIn(node);
    }

    public void outADeclarations(ADeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarations(ADeclarations node)
    {
        inADeclarations(node);
        if(node.getVariablesDeclaration() != null)
        {
            node.getVariablesDeclaration().apply(this);
        }
        outADeclarations(node);
    }

    public void inAVariablesDeclaration(AVariablesDeclaration node)
    {
        defaultIn(node);
    }

    public void outAVariablesDeclaration(AVariablesDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariablesDeclaration(AVariablesDeclaration node)
    {
        inAVariablesDeclaration(node);
        if(node.getVariablesDefinitionList() != null)
        {
            node.getVariablesDefinitionList().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVariablesDeclaration(node);
    }

    public void inASingleVariablesDefinitionList(ASingleVariablesDefinitionList node)
    {
        defaultIn(node);
    }

    public void outASingleVariablesDefinitionList(ASingleVariablesDefinitionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleVariablesDefinitionList(ASingleVariablesDefinitionList node)
    {
        inASingleVariablesDefinitionList(node);
        if(node.getVariablesDefinition() != null)
        {
            node.getVariablesDefinition().apply(this);
        }
        outASingleVariablesDefinitionList(node);
    }

    public void inAMultipleVariablesDefinitionList(AMultipleVariablesDefinitionList node)
    {
        defaultIn(node);
    }

    public void outAMultipleVariablesDefinitionList(AMultipleVariablesDefinitionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleVariablesDefinitionList(AMultipleVariablesDefinitionList node)
    {
        inAMultipleVariablesDefinitionList(node);
        if(node.getVariablesDefinition() != null)
        {
            node.getVariablesDefinition().apply(this);
        }
        if(node.getVariablesDefinitionList() != null)
        {
            node.getVariablesDefinitionList().apply(this);
        }
        outAMultipleVariablesDefinitionList(node);
    }

    public void inAVariablesDefinition(AVariablesDefinition node)
    {
        defaultIn(node);
    }

    public void outAVariablesDefinition(AVariablesDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariablesDefinition(AVariablesDefinition node)
    {
        inAVariablesDefinition(node);
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifierList() != null)
        {
            node.getIdentifierList().apply(this);
        }
        outAVariablesDefinition(node);
    }

    public void inASingleIdentifierList(ASingleIdentifierList node)
    {
        defaultIn(node);
    }

    public void outASingleIdentifierList(ASingleIdentifierList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleIdentifierList(ASingleIdentifierList node)
    {
        inASingleIdentifierList(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outASingleIdentifierList(node);
    }

    public void inAMultipleIdentifierList(AMultipleIdentifierList node)
    {
        defaultIn(node);
    }

    public void outAMultipleIdentifierList(AMultipleIdentifierList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleIdentifierList(AMultipleIdentifierList node)
    {
        inAMultipleIdentifierList(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdentifierList() != null)
        {
            node.getIdentifierList().apply(this);
        }
        outAMultipleIdentifierList(node);
    }

    public void inAType(AType node)
    {
        defaultIn(node);
    }

    public void outAType(AType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAType(AType node)
    {
        inAType(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAType(node);
    }

    public void inABody(ABody node)
    {
        defaultIn(node);
    }

    public void outABody(ABody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABody(ABody node)
    {
        inABody(node);
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getStatementSequence() != null)
        {
            node.getStatementSequence().apply(this);
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        outABody(node);
    }

    public void inASingleStatementSequence(ASingleStatementSequence node)
    {
        defaultIn(node);
    }

    public void outASingleStatementSequence(ASingleStatementSequence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleStatementSequence(ASingleStatementSequence node)
    {
        inASingleStatementSequence(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outASingleStatementSequence(node);
    }

    public void inAMultipleStatementSequence(AMultipleStatementSequence node)
    {
        defaultIn(node);
    }

    public void outAMultipleStatementSequence(AMultipleStatementSequence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultipleStatementSequence(AMultipleStatementSequence node)
    {
        inAMultipleStatementSequence(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        if(node.getStatementSequence() != null)
        {
            node.getStatementSequence().apply(this);
        }
        outAMultipleStatementSequence(node);
    }

    public void inAWritelnStatement(AWritelnStatement node)
    {
        defaultIn(node);
    }

    public void outAWritelnStatement(AWritelnStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWritelnStatement(AWritelnStatement node)
    {
        inAWritelnStatement(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getWriteln() != null)
        {
            node.getWriteln().apply(this);
        }
        outAWritelnStatement(node);
    }

    public void inAAssignmentStatement(AAssignmentStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStatement(AAssignmentStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentStatement(AAssignmentStatement node)
    {
        inAAssignmentStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAssignop() != null)
        {
            node.getAssignop().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAAssignmentStatement(node);
    }

    public void inAEmptyStatement(AEmptyStatement node)
    {
        defaultIn(node);
    }

    public void outAEmptyStatement(AEmptyStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyStatement(AEmptyStatement node)
    {
        inAEmptyStatement(node);
        outAEmptyStatement(node);
    }

    public void inATermExpression(ATermExpression node)
    {
        defaultIn(node);
    }

    public void outATermExpression(ATermExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermExpression(ATermExpression node)
    {
        inATermExpression(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermExpression(node);
    }

    public void inAPlusExpression(APlusExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusExpression(APlusExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpression(APlusExpression node)
    {
        inAPlusExpression(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAPlusExpression(node);
    }

    public void inAMinusExpression(AMinusExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusExpression(AMinusExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpression(AMinusExpression node)
    {
        inAMinusExpression(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAMinusExpression(node);
    }

    public void inAFactorTerm(AFactorTerm node)
    {
        defaultIn(node);
    }

    public void outAFactorTerm(AFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorTerm(AFactorTerm node)
    {
        inAFactorTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorTerm(node);
    }

    public void inAMultTerm(AMultTerm node)
    {
        defaultIn(node);
    }

    public void outAMultTerm(AMultTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultTerm(AMultTerm node)
    {
        inAMultTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAMultTerm(node);
    }

    public void inADivTerm(ADivTerm node)
    {
        defaultIn(node);
    }

    public void outADivTerm(ADivTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivTerm(ADivTerm node)
    {
        inADivTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outADivTerm(node);
    }

    public void inAIdentifierFactor(AIdentifierFactor node)
    {
        defaultIn(node);
    }

    public void outAIdentifierFactor(AIdentifierFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierFactor(AIdentifierFactor node)
    {
        inAIdentifierFactor(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierFactor(node);
    }

    public void inANumberFactor(ANumberFactor node)
    {
        defaultIn(node);
    }

    public void outANumberFactor(ANumberFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberFactor(ANumberFactor node)
    {
        inANumberFactor(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberFactor(node);
    }

    public void inAExpressionFactor(AExpressionFactor node)
    {
        defaultIn(node);
    }

    public void outAExpressionFactor(AExpressionFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionFactor(AExpressionFactor node)
    {
        inAExpressionFactor(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        outAExpressionFactor(node);
    }
}
