/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.pascal.node;

import org.sablecc.pascal.analysis.*;

@SuppressWarnings("nls")
public final class AProgram extends PProgram
{
    private PProgramHeading _programHeading_;
    private PDeclarations _declarations_;
    private PBody _body_;
    private TDot _dot_;

    public AProgram()
    {
        // Constructor
    }

    public AProgram(
        @SuppressWarnings("hiding") PProgramHeading _programHeading_,
        @SuppressWarnings("hiding") PDeclarations _declarations_,
        @SuppressWarnings("hiding") PBody _body_,
        @SuppressWarnings("hiding") TDot _dot_)
    {
        // Constructor
        setProgramHeading(_programHeading_);

        setDeclarations(_declarations_);

        setBody(_body_);

        setDot(_dot_);

    }

    @Override
    public Object clone()
    {
        return new AProgram(
            cloneNode(this._programHeading_),
            cloneNode(this._declarations_),
            cloneNode(this._body_),
            cloneNode(this._dot_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProgram(this);
    }

    public PProgramHeading getProgramHeading()
    {
        return this._programHeading_;
    }

    public void setProgramHeading(PProgramHeading node)
    {
        if(this._programHeading_ != null)
        {
            this._programHeading_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._programHeading_ = node;
    }

    public PDeclarations getDeclarations()
    {
        return this._declarations_;
    }

    public void setDeclarations(PDeclarations node)
    {
        if(this._declarations_ != null)
        {
            this._declarations_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._declarations_ = node;
    }

    public PBody getBody()
    {
        return this._body_;
    }

    public void setBody(PBody node)
    {
        if(this._body_ != null)
        {
            this._body_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._body_ = node;
    }

    public TDot getDot()
    {
        return this._dot_;
    }

    public void setDot(TDot node)
    {
        if(this._dot_ != null)
        {
            this._dot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dot_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._programHeading_)
            + toString(this._declarations_)
            + toString(this._body_)
            + toString(this._dot_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._programHeading_ == child)
        {
            this._programHeading_ = null;
            return;
        }

        if(this._declarations_ == child)
        {
            this._declarations_ = null;
            return;
        }

        if(this._body_ == child)
        {
            this._body_ = null;
            return;
        }

        if(this._dot_ == child)
        {
            this._dot_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._programHeading_ == oldChild)
        {
            setProgramHeading((PProgramHeading) newChild);
            return;
        }

        if(this._declarations_ == oldChild)
        {
            setDeclarations((PDeclarations) newChild);
            return;
        }

        if(this._body_ == oldChild)
        {
            setBody((PBody) newChild);
            return;
        }

        if(this._dot_ == oldChild)
        {
            setDot((TDot) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
